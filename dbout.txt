======================================================== test session starts ========================================================
platform win32 -- Python 3.11.9, pytest-8.3.4, pluggy-1.5.0
rootdir: C:\Users\liad8\Documents\CyberPython\FinalProjectFinal
plugins: Faker-26.0.0, mock-3.14.0, typeguard-2.13.3, anyio-3.7.1
collected 22 items

dbManager.py .......F....F..F.F....                                                                                            [100%]

============================================================= FAILURES ==============================================================
________________________________________________ TestDbManager.test_08_share_summary ________________________________________________

self = <dbManager.TestDbManager testMethod=test_08_share_summary>

    def test_08_share_summary(self):
        logging.info("\n--- Testing share_summary ---")
        # Success 1: User 1 shares summary 1 with User 2 (view)
        self.run_test_case(
            self.db_manager.share_summary,
            (
                TestDbManager.setup_summary1_id,
                TestDbManager.setup_user1_id,
                TestDbManager.setup_user2_id,
                "view",
            ),
            True,
            "Success Case 1: Share Owner's Summary (view)",
        )
        # Check permission table
        self.db_manager.cursor.execute(
            "SELECT permissionType FROM permission WHERE summaryId = %s AND userId = %s",
            (TestDbManager.setup_summary1_id, TestDbManager.setup_user2_id),
        )
        perm = self.db_manager.cursor.fetchone()
        self.assertIsNotNone(perm)
        self.assertEqual(perm["permissionType"], "view")
    
        # Success 2: User 1 updates share permission for User 2 to 'edit'
        self.run_test_case(
            self.db_manager.share_summary,
            (
                TestDbManager.setup_summary1_id,
                TestDbManager.setup_user1_id,
                TestDbManager.setup_user2_id,
                "edit",
            ),
            True,
            "Success Case 2: Update Permission (edit)",
        )
        # Check permission table again
        self.db_manager.cursor.execute(
            "SELECT permissionType FROM permission WHERE summaryId = %s AND userId = %s",
            (TestDbManager.setup_summary1_id, TestDbManager.setup_user2_id),
        )
        perm = self.db_manager.cursor.fetchone()
        self.assertIsNotNone(perm)
>       self.assertEqual(perm["permissionType"], "edit")
E       AssertionError: 'view' != 'edit'
E       - view
E       + edit

dbManager.py:1357: AssertionError
------------------------------------------------------- Captured stdout call --------------------------------------------------------
Summary 93 shared with user 94 with view permission.
Summary 93 shared with user 94 with edit permission.
_______________________________________________ TestDbManager.test_13_delete_summary ________________________________________________

self = <dbManager.TestDbManager testMethod=test_13_delete_summary>
func = <bound method DbManager.delete_summary of <dbManager.DbManager object at 0x00000264CB01CB10>>, args = (999998,)
expected_success = False, case_desc = 'Failure Case 1: Delete Non-existent Summary ID'

    def run_test_case(self, func, args, expected_success, case_desc):
        """Helper method to run a single test case and log results."""
        self.results["total"] += 1
        log_prefix = f"{func.__name__} - {case_desc}"
        try:
            result = func(*args)
            # Determine if the outcome matches the expectation
            outcome_matches_expectation = False
            if expected_success:
                if isinstance(result, bool) and result:
                    outcome_matches_expectation = True
                elif isinstance(result, int) and result > 0:
                    outcome_matches_expectation = True  # e.g., insert returning ID
                elif isinstance(result, (list, bytes, str)) and result:
                    outcome_matches_expectation = (
                        True  # e.g., get returning non-empty list/bytes/string
                    )
                elif result is not None and not isinstance(
                    result, (bool, int, list, bytes, str)
                ):
                    outcome_matches_expectation = True  # e.g., get returning object
                elif isinstance(result, list) and expected_success:
                    outcome_matches_expectation = True  # Allow empty list as success if expected (e.g., get_events for user with none)
    
            else:  # Not expected_success (failure expected)
                if isinstance(result, bool) and not result:
                    outcome_matches_expectation = True
                elif result == -1:
                    outcome_matches_expectation = (
                        True  # e.g., get_id, insert_summary failure
                    )
                elif result is None:
                    outcome_matches_expectation = (
                        True  # e.g., get non-existent, auth fail
                    )
                elif isinstance(result, list) and not result:
                    outcome_matches_expectation = True  # e.g., get_events error
                elif isinstance(result, bytes) and not result:
                    outcome_matches_expectation = True  # e.g., get_salt non-existent
    
            if outcome_matches_expectation:
                logging.info(
                    f"{log_prefix}: PASSED (Expected: {'Success' if expected_success else 'Failure'}, Result: {str(result)[:100]}) - GREEN"
                )  # Limit result log length
                self.results["passed"] += 1
                self.assertTrue(True)  # Mark unittest framework positively
            else:
                logging.error(
                    f"{log_prefix}: FAILED (Expected: {'Success' if expected_success else 'Failure'}, Result: {str(result)[:100]}) - RED"
                )  # Limit result log length
                self.results["failed"] += 1
>               self.fail(
                    f"{log_prefix}: Outcome mismatch."
                )  # Mark unittest framework negatively
E               AssertionError: delete_summary - Failure Case 1: Delete Non-existent Summary ID: Outcome mismatch.

dbManager.py:1081: AssertionError

During handling of the above exception, another exception occurred:

self = <dbManager.TestDbManager testMethod=test_13_delete_summary>

    def test_13_delete_summary(self):
        logging.info("\n--- Testing delete_summary ---")
        # Setup: Create a temporary summary to delete
        del_title = f"To Be Deleted {RUN_ID}"
        del_content = "Delete me."
        del_sid = self.db_manager.insert_summary(
            del_title, del_content, TestDbManager.setup_user1_id, "DeleteFont"
        )
        self.assertGreater(
            del_sid, 0, "Setup failed: Could not create summary for deletion test"
        )
        del_filepath = self.db_manager.get_summary(
            del_sid
        ).path_to_summary  # Get path for verification later
        # Also create a link pointing to it from S1 (if S1 still exists)
        if TestDbManager.setup_summary1_id > 0:
            s1_content_link_del = f"{TEST_SUMMARY_CONTENT}\n###link {del_title}\n"
            self.db_manager.save_summary(
                TestDbManager.setup_summary1_id, s1_content_link_del
            )
            # Verify link exists S1 -> del_sid
            self.db_manager.cursor.execute(
                "SELECT 1 FROM links WHERE source_summary_id = %s AND target_summary_id = %s",
                (TestDbManager.setup_summary1_id, del_sid),
            )
            self.assertIsNotNone(
                self.db_manager.cursor.fetchone(),
                "Setup failed: Link S1 -> del_sid not created",
            )
    
        # Success 1: Delete the temporary summary
        self.run_test_case(
            self.db_manager.delete_summary,
            (del_sid,),
            True,
            "Success Case 1: Delete Existing Summary",
        )
        # Verify it's gone from DB
        self.assertIsNone(
            self.db_manager.get_summary(del_sid), "Summary should be null after delete"
        )
        # Verify file is gone
        self.assertFalse(os.path.exists(del_filepath), "Summary file should be deleted")
        # Verify link S1 -> del_sid is gone (tested via _delete_links called by delete_summary)
        self.db_manager.cursor.execute(
            "SELECT 1 FROM links WHERE target_summary_id = %s", (del_sid,)
        )
        self.assertIsNone(
            self.db_manager.cursor.fetchone(),
            "Incoming link to deleted summary should be gone",
        )
    
        # Success 2: Delete another summary (use S2 created in setup, if it wasn't deleted yet)
        if TestDbManager.setup_summary2_id > 0:
            s2_filepath = self.db_manager.get_summary(
                TestDbManager.setup_summary2_id
            ).path_to_summary  # Get path before delete
            self.run_test_case(
                self.db_manager.delete_summary,
                (TestDbManager.setup_summary2_id,),
                True,
                "Success Case 2: Delete Another Existing Summary (S2)",
            )
            self.assertIsNone(
                self.db_manager.get_summary(TestDbManager.setup_summary2_id)
            )
            if s2_filepath:  # Check path deletion only if path existed
                self.assertFalse(os.path.exists(s2_filepath))
            # Mark S2 as deleted so tearDown doesn't try again
            TestDbManager.setup_summary2_id = -1
        else:
            logging.warning(
                "Skipping delete_summary Success Case 2: Summary S2 already deleted."
            )
            self.results["total"] += 1
            self.results["passed"] += 1  # Count skipped as passed
    
        # Failure 1: Delete a non-existent summary ID
>       self.run_test_case(
            self.db_manager.delete_summary,
            (999998,),
            False,
            "Failure Case 1: Delete Non-existent Summary ID",
        )

dbManager.py:1669: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
dbManager.py:1093: in run_test_case
    self.fail(log_msg)
E   AssertionError: delete_summary - Failure Case 1: Delete Non-existent Summary ID: EXCEPTION (AssertionError: delete_summary - Failure Case 1: Delete Non-existent Summary ID: Outcome mismatch.) - RED (Exception occurred unexpectedly)
------------------------------------------------------- Captured stdout call --------------------------------------------------------
matches for links:  []
matches for links:  ['To Be Deleted 92fce0d3']
sid: 100 for link: To Be Deleted 92fce0d3
Saved 1 links for summary 93
--------------------------------------------------------- Captured log call ---------------------------------------------------------
ERROR    root:dbManager.py:1077 delete_summary - Failure Case 1: Delete Non-existent Summary ID: FAILED (Expected: Failure, Result: True) - RED
ERROR    root:dbManager.py:1091 delete_summary - Failure Case 1: Delete Non-existent Summary ID: EXCEPTION (AssertionError: delete_summary - Failure Case 1: Delete Non-existent Summary ID: Outcome mismatch.) - RED (Exception occurred unexpectedly)
Traceback (most recent call last):
  File "C:\Users\liad8\Documents\CyberPython\FinalProjectFinal\dbManager.py", line 1081, in run_test_case
    self.fail(
  File "C:\Program Files\Python311\Lib\unittest\case.py", line 703, in fail
    raise self.failureException(msg)
AssertionError: delete_summary - Failure Case 1: Delete Non-existent Summary ID: Outcome mismatch.
________________________________________________ TestDbManager.test_16_update_event _________________________________________________

self = <dbManager.TestDbManager testMethod=test_16_update_event>
func = <bound method DbManager.update_event of <dbManager.DbManager object at 0x00000264CB01CB10>>
args = (49, 93, 'Updated Event 1 92fce0d3', '2025-04-24 17:12:10'), expected_success = True
case_desc = 'Success Case 1: Update Own Event'

    def run_test_case(self, func, args, expected_success, case_desc):
        """Helper method to run a single test case and log results."""
        self.results["total"] += 1
        log_prefix = f"{func.__name__} - {case_desc}"
        try:
>           result = func(*args)
E           TypeError: DbManager.update_event() takes 4 positional arguments but 5 were given

dbManager.py:1035: TypeError

During handling of the above exception, another exception occurred:

self = <dbManager.TestDbManager testMethod=test_16_update_event>

    def test_16_update_event(self):
        logging.info("\n--- Testing update_event ---")
        # Check if event 1 exists before trying to update
        if TestDbManager.setup_event1_id != -1:
            new_title = f"Updated Event 1 {RUN_ID}"
            new_date = (datetime.datetime.now() + datetime.timedelta(days=5)).isoformat(
                sep=" ", timespec="seconds"
            )
            # Success 1: Update event 1 belonging to user 1
>           self.run_test_case(
                self.db_manager.update_event,
                (
                    TestDbManager.setup_event1_id,
                    TestDbManager.setup_user1_id,
                    new_title,
                    new_date,
                ),
                True,
                "Success Case 1: Update Own Event",
            )

dbManager.py:1761: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
dbManager.py:1093: in run_test_case
    self.fail(log_msg)
E   AssertionError: update_event - Success Case 1: Update Own Event: EXCEPTION (TypeError: DbManager.update_event() takes 4 positional arguments but 5 were given) - RED (Exception occurred unexpectedly)
--------------------------------------------------------- Captured log call ---------------------------------------------------------
ERROR    root:dbManager.py:1091 update_event - Success Case 1: Update Own Event: EXCEPTION (TypeError: DbManager.update_event() takes 4 positional arguments but 5 were given) - RED (Exception occurred unexpectedly)
Traceback (most recent call last):
  File "C:\Users\liad8\Documents\CyberPython\FinalProjectFinal\dbManager.py", line 1035, in run_test_case
    result = func(*args)
             ^^^^^^^^^^^
TypeError: DbManager.update_event() takes 4 positional arguments but 5 were given
___________________________________________ TestDbManager.test_18_get_summary_share_link ____________________________________________

self = <dbManager.TestDbManager testMethod=test_18_get_summary_share_link>
func = <bound method DbManager.get_summary_share_link of <dbManager.DbManager object at 0x00000264CB01CB10>>, args = (999999,)
expected_success = False, case_desc = 'Failure Case 1: Non-existent Summary ID'

    def run_test_case(self, func, args, expected_success, case_desc):
        """Helper method to run a single test case and log results."""
        self.results["total"] += 1
        log_prefix = f"{func.__name__} - {case_desc}"
        try:
            result = func(*args)
            # Determine if the outcome matches the expectation
            outcome_matches_expectation = False
            if expected_success:
                if isinstance(result, bool) and result:
                    outcome_matches_expectation = True
                elif isinstance(result, int) and result > 0:
                    outcome_matches_expectation = True  # e.g., insert returning ID
                elif isinstance(result, (list, bytes, str)) and result:
                    outcome_matches_expectation = (
                        True  # e.g., get returning non-empty list/bytes/string
                    )
                elif result is not None and not isinstance(
                    result, (bool, int, list, bytes, str)
                ):
                    outcome_matches_expectation = True  # e.g., get returning object
                elif isinstance(result, list) and expected_success:
                    outcome_matches_expectation = True  # Allow empty list as success if expected (e.g., get_events for user with none)
    
            else:  # Not expected_success (failure expected)
                if isinstance(result, bool) and not result:
                    outcome_matches_expectation = True
                elif result == -1:
                    outcome_matches_expectation = (
                        True  # e.g., get_id, insert_summary failure
                    )
                elif result is None:
                    outcome_matches_expectation = (
                        True  # e.g., get non-existent, auth fail
                    )
                elif isinstance(result, list) and not result:
                    outcome_matches_expectation = True  # e.g., get_events error
                elif isinstance(result, bytes) and not result:
                    outcome_matches_expectation = True  # e.g., get_salt non-existent
    
            if outcome_matches_expectation:
                logging.info(
                    f"{log_prefix}: PASSED (Expected: {'Success' if expected_success else 'Failure'}, Result: {str(result)[:100]}) - GREEN"
                )  # Limit result log length
                self.results["passed"] += 1
                self.assertTrue(True)  # Mark unittest framework positively
            else:
                logging.error(
                    f"{log_prefix}: FAILED (Expected: {'Success' if expected_success else 'Failure'}, Result: {str(result)[:100]}) - RED"
                )  # Limit result log length
                self.results["failed"] += 1
>               self.fail(
                    f"{log_prefix}: Outcome mismatch."
                )  # Mark unittest framework negatively
E               AssertionError: get_summary_share_link - Failure Case 1: Non-existent Summary ID: Outcome mismatch.

dbManager.py:1081: AssertionError

During handling of the above exception, another exception occurred:

self = <dbManager.TestDbManager testMethod=test_18_get_summary_share_link>

    def test_18_get_summary_share_link(self):
        logging.info("\n--- Testing get_summary_share_link ---")
        # Success 1: Get share link for summary 1 (if exists)
        if TestDbManager.setup_summary1_id > 0:
            link1 = self.run_test_case(
                self.db_manager.get_summary_share_link,
                (TestDbManager.setup_summary1_id,),
                True,
                "Success Case 1: Get Link for Summary 1",
            )
            self.assertEqual(link1, TEST_SUMMARY_1_TITLE)
        else:
            logging.warning(
                "Skipping get_summary_share_link Success Case 1: Summary 1 ID not available."
            )
            self.results["total"] += 1
            self.results["passed"] += 1
    
        # Success 2: Get share link for summary 3 (created in link test, if exists)
        if TestDbManager.setup_summary3_id > 0:  # Check if summary 3 exists
            link3 = self.run_test_case(
                self.db_manager.get_summary_share_link,
                (TestDbManager.setup_summary3_id,),
                True,
                "Success Case 2: Get Link for Summary 3",
            )
            self.assertEqual(link3, TEST_SUMMARY_3_TITLE)
        else:
            logging.warning(
                "Skipping get_summary_share_link Success Case 2: Summary 3 ID not available."
            )
            self.results["total"] += 1
            self.results["passed"] += 1
    
        # Failure 1: Get share link for non-existent summary ID
>       self.run_test_case(
            self.db_manager.get_summary_share_link,
            (999999,),
            False,
            "Failure Case 1: Non-existent Summary ID",
        )

dbManager.py:1927: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
dbManager.py:1093: in run_test_case
    self.fail(log_msg)
E   AssertionError: get_summary_share_link - Failure Case 1: Non-existent Summary ID: EXCEPTION (AssertionError: get_summary_share_link - Failure Case 1: Non-existent Summary ID: Outcome mismatch.) - RED (Exception occurred unexpectedly)
--------------------------------------------------------- Captured log call ---------------------------------------------------------
ERROR    root:dbManager.py:1077 get_summary_share_link - Failure Case 1: Non-existent Summary ID: FAILED (Expected: Failure, Result: ) - RED
ERROR    root:dbManager.py:1091 get_summary_share_link - Failure Case 1: Non-existent Summary ID: EXCEPTION (AssertionError: get_summary_share_link - Failure Case 1: Non-existent Summary ID: Outcome mismatch.) - RED (Exception occurred unexpectedly)
Traceback (most recent call last):
  File "C:\Users\liad8\Documents\CyberPython\FinalProjectFinal\dbManager.py", line 1081, in run_test_case
    self.fail(
  File "C:\Program Files\Python311\Lib\unittest\case.py", line 703, in fail
    raise self.failureException(msg)
AssertionError: get_summary_share_link - Failure Case 1: Non-existent Summary ID: Outcome mismatch.
====================================================== short test summary info ======================================================
FAILED dbManager.py::TestDbManager::test_08_share_summary - AssertionError: 'view' != 'edit'
FAILED dbManager.py::TestDbManager::test_13_delete_summary - AssertionError: delete_summary - Failure Case 1: Delete Non-existent S...
FAILED dbManager.py::TestDbManager::test_16_update_event - AssertionError: update_event - Success Case 1: Update Own Event: EXCEPTI...
FAILED dbManager.py::TestDbManager::test_18_get_summary_share_link - AssertionError: get_summary_share_link - Failure Case 1: Non-e...
=================================================== 4 failed, 18 passed in 1.21s ====================================================
